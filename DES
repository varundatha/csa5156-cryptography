#include <stdio.h>
#include <string.h>
#include <openssl/des.h>

// Function to handle errors
void handleErrors(void) {
    fprintf(stderr, "An error occurred.\n");
    exit(1);
}

// Function to print data in hexadecimal format
void print_hex(const char *title, const unsigned char *s, int len) {
    int n;
    printf("%s:", title);
    for (n = 0; n < len; ++n) {
        if ((n % 16) == 0) printf("\n");
        printf("%02x ", s[n]);
    }
    printf("\n");
}

int main(void) {
    // Key and initialization vector (both 8 bytes)
    DES_cblock key = {0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F, 0x7A, 0x8B};
    DES_cblock ivec = {0x8B, 0x7A, 0x6F, 0x5E, 0x4D, 0x3C, 0x2B, 0x1A};
    DES_key_schedule schedule;

    // Set the key schedule
    if (DES_set_key_checked(&key, &schedule) != 0) {
        handleErrors();
    }

    // Data to be encrypted
    const char* plaintext = "Hello, World! This is a test message.";
    int plaintext_len = strlen(plaintext) + 1; // Include null terminator
    unsigned char ciphertext[1024] = {0};
    unsigned char decryptedtext[1024] = {0};

    // Encrypt the plaintext
    DES_ncbc_encrypt((unsigned char*)plaintext, ciphertext, plaintext_len, &schedule, &ivec, DES_ENCRYPT);

    // Print the ciphertext
    print_hex("Ciphertext", ciphertext, ((plaintext_len + 7) / 8) * 8); // Round up to the nearest multiple of 8

    // Reset the ivec for decryption
    memcpy(ivec, (DES_cblock){0x8B, 0x7A, 0x6F, 0x5E, 0x4D, 0x3C, 0x2B, 0x1A}, sizeof(DES_cblock));

    // Decrypt the ciphertext
    DES_ncbc_encrypt(ciphertext, decryptedtext, ((plaintext_len + 7) / 8) * 8, &schedule, &ivec, DES_DECRYPT);

    // Print the decrypted text
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
