#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void createMatrix(char key[], char matrix[SIZE][SIZE]);
void prepareText(char input[], char output[]);
void encrypt(char plaintext[], char ciphertext[], char matrix[SIZE][SIZE]);
void findPosition(char letter, char matrix[SIZE][SIZE], int *row, int *col);

int main() {
    char key[100], plaintext[100], preparedText[100], encryptedText[100];
    char matrix[SIZE][SIZE];

    printf("Enter the keyword: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';  // Remove newline character

    createMatrix(key, matrix);

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  // Remove newline character

    prepareText(plaintext, preparedText);
    encrypt(preparedText, encryptedText, matrix);

    printf("Encrypted text: %s\n", encryptedText);

    return 0;
}

void createMatrix(char key[], char matrix[SIZE][SIZE]) {
    int i, j, k = 0, used[26] = {0};
    char tempKey[100];

    // Prepare the key: remove duplicates and treat 'J' as 'I'
    for (i = 0; key[i] != '\0'; i++) {
        if (key[i] == 'J') key[i] = 'I';
        if (isalpha(key[i])) {
            key[i] = toupper(key[i]);
            if (!used[key[i] - 'A']) {
                tempKey[k++] = key[i];
                used[key[i] - 'A'] = 1;
            }
        }
    }

    // Fill the matrix with the key
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (k > 0) {
                matrix[i][j] = tempKey[--k];
            } else {
                while (used[k]) k++;
                if (k == 'J' - 'A') k++;
                matrix[i][j] = 'A' + k;
                used[k++] = 1;
            }
        }
    }
}

void prepareText(char input[], char output[]) {
    int i, j = 0;

    for (i = 0; input[i] != '\0'; i++) {
        if (isalpha(input[i])) {
            output[j++] = toupper(input[i]);
            if (output[j-1] == 'J') output[j-1] = 'I';
        }
    }
    output[j] = '\0';

    // Insert 'X' between repeating characters and pad the end if needed
    for (i = 0; output[i] != '\0'; i += 2) {
        if (output[i + 1] == '\0' || output[i] == output[i + 1]) {
            for (j = strlen(output); j > i + 1; j--) {
                output[j] = output[j - 1];
            }
            output[i + 1] = 'X';
        }
    }
}

void encrypt(char plaintext[], char ciphertext[], char matrix[SIZE][SIZE]) {
    int i, row1, col1, row2, col2;

    for (i = 0; plaintext[i] != '\0'; i += 2) {
        findPosition(plaintext[i], matrix, &row1, &col1);
        findPosition(plaintext[i + 1], matrix, &row2, &col2);

        if (row1 == row2) {
            ciphertext[i] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[i + 1] = matrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            ciphertext[i] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[i + 1] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            ciphertext[i] = matrix[row1][col2];
            ciphertext[i + 1] = matrix[row2][col1];
        }
    }
    ciphertext[i] = '\0';
}

void findPosition(char letter, char matrix[SIZE][SIZE], int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (matrix[i][j] == letter) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
