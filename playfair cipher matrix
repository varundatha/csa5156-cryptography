#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to find the position of a character in the Playfair matrix
void findPosition(char matrix[5][5], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I'; // Treat 'J' as 'I'
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to preprocess the plaintext (remove spaces, handle 'J' as 'I', add padding)
void preprocessPlaintext(char *plaintext, char *processedText) {
    int len = strlen(plaintext);
    int k = 0;

    for (int i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            processedText[k++] = toupper(plaintext[i] == 'J' ? 'I' : plaintext[i]);
        }
    }
    processedText[k] = '\0';

    // Add padding if necessary
    len = strlen(processedText);
    if (len % 2 != 0) {
        processedText[len] = 'X';
        processedText[len + 1] = '\0';
    }
}

// Function to encrypt the Playfair cipher
void encryptPlayfair(char *plaintext, char *ciphertext, char matrix[5][5]) {
    int len = strlen(plaintext);
    int row1, col1, row2, col2;

    for (int i = 0; i < len; i += 2) {
        findPosition(matrix, plaintext[i], &row1, &col1);
        findPosition(matrix, plaintext[i + 1], &row2, &col2);

        if (row1 == row2) {
            ciphertext[i] = matrix[row1][(col1 + 1) % 5];
            ciphertext[i + 1] = matrix[row2][(col2 + 1) % 5];
        } else if (col1 == col2) {
            ciphertext[i] = matrix[(row1 + 1) % 5][col1];
            ciphertext[i + 1] = matrix[(row2 + 1) % 5][col2];
        } else {
            ciphertext[i] = matrix[row1][col2];
            ciphertext[i + 1] = matrix[row2][col1];
        }
    }
    ciphertext[len] = '\0';
}

int main() {
    // The given Playfair matrix
    char matrix[5][5] = {
        {'M', 'F', 'H', 'I', 'K'},
        {'U', 'N', 'O', 'P', 'Q'},
        {'Z', 'V', 'W', 'X', 'Y'},
        {'E', 'L', 'A', 'R', 'G'},
        {'D', 'S', 'T', 'B', 'C'}
    };

    char plaintext[] = "Must see you over Cadogan West. Coming at once.";
    char processedText[100];
    char ciphertext[100];

    preprocessPlaintext(plaintext, processedText);
    encryptPlayfair(processedText, ciphertext, matrix);

    printf("Original plaintext: %s\n", plaintext);
    printf("Processed plaintext: %s\n", processedText);
    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
